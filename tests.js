$(document).ready(function () {

  QUnit.test( "Test Get Abstract For Title [Feature ID: 9]", function( assert ) {
    assert.expect(1);
    var correctAbstract = "Web applications can be easily made available to an international audience by leveraging frameworks and tools for automatic translation and localization. However, these automated changes can distort the appearance of web applications since it is challenging for developers to design their websites to accommodate the expansion and contraction of text after it is translated to another language. Existing web testing techniques do not support developers in checking for these types of problems and manually checking every page in every language can be a labor intensive and error prone task. To address this problem, we introduce an automated technique for detecting when a web page's appearance has been distorted due to internationalization efforts and identifying the HTML elements or text responsible for the observed problem. In evaluation, our approach was able to detect internationalization problems in a set of 54 web applications with high precision and recall and was able to accurately identify the underlying elements in the web pages that led to the observed problem."
    var abstract;

    function getAbstractForDocTitle(title){
      $.ajax({
        url: "http://ieeexplore.ieee.org/gateway/ipsSearch.jsp?ti="+title,
        dataType: "xml",
        success: function( response ) {
          abstract = response.getElementsByTagName("document")[0].getElementsByTagName("abstract")[0]["textContent"];
          console.log(abstract);
        }
      });
    }

    var input = "Detecting and Localizing Internationalization Presentation Failures in Web Applications"
    getAbstractForDocTitle(input);

    var done = assert.async();
    setTimeout(function(){
      assert.deepEqual(abstract, correctAbstract);
      console.log("after timeout: " + abstract);
      done();
    }, 4000);

  });


  QUnit.test( "Test Getting papers for keywords [Feature ID: 14]", function( assert ) {
    assert.expect(1);
    var correctAbstract = "Medical imaging currently relies on several techniques, including X-rays, magnetic resonance, and echography. However, these techniques exhibit drawbacks, and alternative approaches are required. Microwave imaging has been proposed as a possible solution, especially for breast cancer imaging. However, most of these systems work with a central frequency of a few gigahertz, and this leads to a suboptimum resolution, which can jeopardize the image quality. Millimeter waves can provide superior resolutions, at the cost of a lower penetration depth within the breast tissue. In addition, a significant fraction of the power generated by a mm-wave imaging system would be reflected back from the skin. For these reasons, and also considering that mm-wave transmitters and receivers have been historically outperformed by microwave counterparts in terms of available power and sensitivity, mm-wave imaging has not been considered a possible solution. This paper contributes to demonstrate a paradigm shift toward the possible use of mm-waves for breast cancer imaging of targets a few centimeter below the skin, a useful penetration depth for several cases. All key points are addressed using analytical, full-wave, and multiphysics simulations, including the system architecture (linear and conformal), the safety aspects (power density, specific absorption rate, and temperature increase), and the use of realistic breast models derived from ex vivo measurements."
    var abstract;

    function getPapersForWords(search){
      $.ajax({
        url: "http://ieeexplore.ieee.org/gateway/ipsSearch.jsp?querytext="+search,
        dataType: "xml",
        success: function( response ) {
          abstract = response.getElementsByTagName("document")[0].getElementsByTagName("abstract")[0]["textContent"];
        }
      });
    }

    var input = "parallel algorithms";
    getPapersForWords(input);

    var done = assert.async();
    setTimeout(function(){
      assert.deepEqual(abstract, correctAbstract);
      done();
    }, 4000);
  });

  QUnit.test( "Test Save Previous Searches [Feature ID: 11]", function( assert ) {
    assert.expect(1);
    var correctAuthor = "Test Author";
    var author = "";

    var request = $.ajax({
            url: "StoreAuthor.php",
            type: "POST",
            data: {author : correctAuthor},
            dataType: "text"
          });
          request.done(function(msg){
            getPreviousSearches;
          });

    function getPreviousSearches() {
      var request = $.ajax({
        url: "GetPrevSearches.php",
        type: "GET",
        dataType: "JSON"
      });

      request.done(function(msg) {
        var array = msg;
        console.log("Before delete: " + msg);

        if (array.length != 0){
          for (var i = 0; i < array.length; i++){
            if(correctAuthor == array[i]){
              author = array[i];
            }
          }
        }

        $.ajax({
          url: "RemoveTestAuthor.php",
          type: "GET",
          dataType: "JSON",
          success: function(response){
            console.log(response);
          }
        });        
      });
    }

    getPreviousSearches();

    var done = assert.async();
    setTimeout(function(){
      assert.deepEqual(author, correctAuthor);
      done();
    }, 4000);
    
  });

  QUnit.test( "Test Store Current Word [Feature ID: 3]", function( assert ) {
    assert.expect(1);
    var correctWord = "algorithm";
    var testWord;
    var originalWord;

    function storeCurrentWord(word){
      
      $.ajax({
        url: "GetCurrentWord.php",
        type: "GET",
        dataType: "text",
        success: function(response){
          console.log("original word:" +response);
          originalWord = response;

          var request = $.ajax({
            url: "StoreCurrentWord.php",
            type: "POST",
            data: {word : word},
            dataType: "text"
          });
          request.done(function(msg) {
            console.log("after storing test word: " + msg);
            testWord = msg;
            $.ajax({
              url: "StoreCurrentWord.php",
              type: "POST",
              data: {word: originalWord},
              dataType: "text",
              success: function(response){
                console.log("reseting to original word:" + response);
              }
            });
          });
        }
      });
    }

    var input = correctWord;
    storeCurrentWord(input);

    var done = assert.async();
    setTimeout(function(){
      assert.deepEqual(testWord, correctWord);
      console.log("after timeout, word: " + testWord);
      console.log("after timeout, originalWord: " + originalWord);
      done();
    }, 4000);

  });

  QUnit.test( "Test searching by author [Feature ID: 7]", function( assert ) {
    assert.expect(1);
    var correctAbstract = "HTTP based invocations allow web application components to communicate among themselves and build dynamic customized web pages. Invocations are widely used by web applications, but are a common source of errors. Existing techniques are only able to verify limited correctness properties of web application invocations and omit key properties, such as an argument's type and value must match its target parameter's domain. This paper presents the first approach for verifying these correctness properties of web application invocations. An empirical evaluation of the technique shows that it is able to identify, with high precision, over 30% more invocation errors than were previously identified and that the approach has a low analysis runtime cost.";
    var abstract;

    function getAbstractForAuthor(author){
      $.ajax({
        url: "http://ieeexplore.ieee.org/gateway/ipsSearch.jsp?au="+author,
        dataType: "xml",
        success: function( response ) {
          abstract = response.getElementsByTagName("document")[0].getElementsByTagName("abstract")[0]["textContent"];
        }
      });
    }

    var input = "halfond"
    getAbstractForAuthor(input);

    var done = assert.async();
    setTimeout(function(){
      assert.deepEqual(abstract, correctAbstract);
      done();
    }, 4000);
  });

  QUnit.test( "Test Get Abstract For Title [Feature ID: 4]", function( assert ) {
    assert.expect(1);
    var correctLink = "http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7515472";
    var link;

    function getAbstractForDocTitle(title){
      $.ajax({
        url: "http://ieeexplore.ieee.org/gateway/ipsSearch.jsp?ti="+title,
        dataType: "xml",
        success: function( response ) {
          link = response.getElementsByTagName("document")[0].getElementsByTagName("pdf")[0]["textContent"];
        }
      });
    }

    var input = "Detecting and Localizing Internationalization Presentation Failures in Web Applications"
    getAbstractForDocTitle(input);

    var done = assert.async();
    setTimeout(function(){
      assert.deepEqual(link, correctLink);
      done();
    }, 4000);

  });
  
  


  QUnit.test( "Test Status Bar For Word Cloud Progress [Feature ID: 6]", function( assert ) {
    assert.expect(1);
    var correctWidth = 100;
    var testWidth;

    function move(num, start) {
      // var elem = document.getElementById("myBar");
      var width = start;
      var id = setInterval(frame, 10);
      function frame() {
          if (width >= num) {
              clearInterval(id);
              testWidth = width;
          } else {
              width+=2;
              testWidth = width;
              // elem.style.width = width + '%';
          }
          testWidth = width;
      }
      // testWidth = width;
    }

    
    move(100, 0);    
    var done = assert.async();
    setTimeout(function(){
      assert.deepEqual(testWidth, correctWidth);
      done();
    }, 2000);

  });


  QUnit.test( "Test Search By Author Last Name [Feature ID: 1]", function( assert ) {
    assert.expect(1);
    var correctAuthor = "Test Author";
    var author = "";

    var request = $.ajax({
            url: "StoreAuthor.php",
            type: "POST",
            data: {author : correctAuthor},
            dataType: "text"
          });
          request.done(function(msg){
            getStoredAuthor();
          });

    function getStoredAuthor() {
      var request = $.ajax({
        url: "GetPrevSearches.php",
        type: "GET",
        dataType: "JSON"
      });

      request.done(function(msg) {
        var array = msg;

        if (array.length != 0){
          for (var i = 0; i < array.length; i++){
            if(correctAuthor == array[i]){
              author = array[i];
            }
          }
        }

        $.ajax({
          url: "RemoveTestAuthor.php",
          type: "GET",
          dataType: "JSON",
          success: function(response){
            // console.log(response);
          }
        });        
      });
    }

    getStoredAuthor();

    var done = assert.async();
    setTimeout(function(){
      assert.deepEqual(author, correctAuthor);
      done();
    }, 4000);
    
  });

  

  QUnit.test("Test access to paper's Bibtex [Feature ID: 5]", function(assert){
    assert.expect(1);
    var correctBibTex = "@inproceedings{Halfond_2012,\n\tdoi = {10.1109/issre.2012.37},\n\turl = {https://doi.org/10.1109%2Fissre.2012.37},\n\tyear = 2012,\n\tmonth = {nov},\n\tpublisher = {{IEEE}},\n\tauthor = {William G.J. Halfond},\n\ttitle = {Automated Checking of Web Application Invocations},\n\tbooktitle = {2012 {IEEE} 23rd International Symposium on Software Reliability Engineering}\n}";
    var bibtexresult;

    function showBibTeX(doi) {
      $.ajax({
        url : "http://dx.doi.org/"+doi,
        headers: {
          Accept: "application/x-bibtex; charset=utf-8",
          "Content-Type": "application/x-bibtex; charset=utf-8"
        },
        success : function(result){
          // console.log(result);
          // console.log(typeof result);
          // alert(result);
          bibtexresult = result;
        }
      });
    }

    var input ="10.1109/issre.2012.37";
    showBibTeX(input);

    var done = assert.async();
    setTimeout(function(){
      assert.deepEqual(bibtexresult, correctBibTex);
      done();
    }, 4000)


  });

  QUnit.test( "Test Getting List of Papers for a Word [Feature ID: 3]", function( assert ) {
    assert.expect(3);
    var correctTitle1 = "Automated Checking of Web Application Invocations";
    var correctTitle2 = "Command-Form Coverage for Testing Database Applications";
    var correctTitle3 = "Energy-directed test suite optimization";
    var title1;
    var title2;
    var title3;

    function getPapersForWords(search){
      $.ajax({
        url: "http://ieeexplore.ieee.org/gateway/ipsSearch.jsp?querytext="+search+"&au=halfond",
        dataType: "xml",
        success: function( response ) {
          title1 = response.getElementsByTagName("document")[0].getElementsByTagName("title")[0]["textContent"];
          title2 = response.getElementsByTagName("document")[1].getElementsByTagName("title")[0]["textContent"];
          title3 = response.getElementsByTagName("document")[2].getElementsByTagName("title")[0]["textContent"];
        }
      });
    }

    var input = "application";
    getPapersForWords(input);

    var done = assert.async();
    setTimeout(function(){
      assert.deepEqual(title1, correctTitle1);
      assert.deepEqual(title2, correctTitle2);
      assert.deepEqual(title3, correctTitle3);
      done();
    }, 4000);
  });


  QUnit.test( "Test Getting List of Papers from a Conference [Feature ID: 8]", function( assert ) {
    assert.expect(3);
    var correctTitle1 = "Skyfire: Model-Based Testing with Cucumber";
    var correctTitle2 = "Automatically Documenting Unit Test Cases";
    var correctTitle3 = "Large Scale Generation of Complex and Faulty PHP Test Cases";
    var title1;
    var title2;
    var title3;

    function GetPapersForConf(conference){
      $.ajax({
        url: "http://ieeexplore.ieee.org/gateway/ipsSearch.jsp?jn="+conference,
        dataType: "xml",
        success: function( response ) {
          title1 = response.getElementsByTagName("document")[9].getElementsByTagName("title")[0]["textContent"];
          title2 = response.getElementsByTagName("document")[10].getElementsByTagName("title")[0]["textContent"];
          title3 = response.getElementsByTagName("document")[12].getElementsByTagName("title")[0]["textContent"];
        }
      });
    }

    var input = "2016 IEEE International Conference on Software Testing, Verification and Validation (ICST)";
    GetPapersForConf(input);

    var done = assert.async();
    setTimeout(function(){
      assert.deepEqual(title1, correctTitle1);
      assert.deepEqual(title2, correctTitle2);
      assert.deepEqual(title3, correctTitle3);
      done();
    }, 4000);
  });  

  QUnit.test("Test Download Word Cloud Image [Feature ID: 13]", function(assert){
    assert.expect(1);

    function downloadURI(uri, name) {
      var link = document.createElement("a");
      link.download = name;
      link.href = uri;
      document.body.appendChild(link);
      //link.click();
    }

    var uri = "data:picture.png";
    downloadURI(uri, "myWordCloud.png");
    assert.deepEqual(uri, "data:picture.png");

  }); 

  QUnit.test("Test Export List to PDF and Text [Feature ID: 10]", function(assert){
    assert.expect(3);

    function buildRow(title, author, conference){
      return {
        title: title,
        author: author,
        conference: conference
      };
    }

    var title = "The Title";
    var author = "Halfond";
    var conference = "IEEE Testing Is Fun Conference";
    var row = buildRow(title, author, conference);

    assert.deepEqual(row.title,title);
    assert.deepEqual(row.author,author);
    assert.deepEqual(row.conference,conference);
  });

  QUnit.test("Test Paper List Subset [Feature ID: 12]", function(assert){
    assert.expect(1);

    var originalBool;
    var testBool;

    $.ajax({
      url: "GetSubsetBool.php",
      type: "GET",
      dataType: "text",
      success: function(response){
        originalBool = response;
        $.ajax({
          url: "StoreSubsetBool.php",
          type: "POST",
          data: {bool: "false"},
          dataType: "text",
          success: function(response1){
            $.ajax({
              url: "GetSubsetBool.php",
              type: "GET",
              dataType: "text",
              success: function(response2){
                testBool = response2;
              }
            });
          }
        });
      }
    });

  //   var done = assert.async();
  //   setTimeout(function(){
  //     assert.deepEqual("false", testBool);
  //     $.ajax({
  //       url: "StoreSubsetBool.php",
  //       type: "POST",
  //       data: {bool: originalBool},
  //       datatype: "text",
  //       success: function (resp) {
  //       }
  //     });
  //     done();
  //   }, 1500);
  // });   

})
